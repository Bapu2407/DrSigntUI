{"version":3,"sources":["webpack:///src/BaseComponentDM.ts","webpack:///src/app/router.animations.ts"],"names":["BaseComponentDM","router","user","mode","pageSize","RECORDSIZE","pageNo","submitAttempt","modalReference","close","modalReferenceImage","modalReferencePrescriptionImage","date","time","console","log","JSON","stringify","newTIme","split","newTImeTImePart","newTImeAmPmPart","ngTIme","hourMinValue","hour","min","Number","trim","amPm","jsDate","dateParts","dateDelimitor","dbDate","format","controls","error","getFormValidationErrors","shift","text","control_name","controlName","error_name","error_value","requiredLength","form_fill_failure_msg","errors","Object","keys","forEach","key","control","concat","controlErrors","keyError","push","routerTransition","slideToRight","transform"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { FormBuilder, AbstractControl,FormGroup, FormControl, Validators, FormArray,ValidationErrors } from '@angular/forms';\r\nimport { Config } from './app/config';\r\nimport {  NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport *  as moment from 'moment';\r\nimport { Router } from '@angular/router';\r\n\r\nexport class BaseComponentDM {\r\n     \r\n    user:any = {}\r\n    mode:string = \"add\"\r\n    form_fill_failure_msg:string\r\n    pageSize = Config.RECORDSIZE;\r\n    pageNo = 1    \r\n  modalReference: NgbModalRef;\r\n    fielMappingModalReference: NgbModalRef;\r\n    modalReferenceImage: NgbModalRef;\r\n    modalReferencePrescriptionImage: NgbModalRef;\r\n    submitAttempt:boolean = false\r\n\r\n   // showSideBar:boolean = false //Config.showSideBar\r\n\r\n    constructor(public router: Router\r\n    ) {\r\n\r\n     \r\n    }\r\n    \r\n    closeModal() {\r\n     \r\n      if(this.modalReference)\r\n        this.modalReference.close();\r\n      \r\n    }\r\n    closeCustomModal() {\r\n      if(this.modalReferenceImage)\r\n        this.modalReferenceImage.close();\r\n     \r\n    }\r\n    closeCustomModal2() {\r\n      if(this.modalReferencePrescriptionImage)\r\n      this.modalReferencePrescriptionImage.close(); \r\n    }\r\n    \r\n\r\n    convertFromddmmyyy(date){\r\n      return moment(date,\"DD-MM-YYYY\")\r\n    }\r\n    backTONgTImeFOrmat(time){\r\n      if(time && time !=\"\"){\r\n        \r\n        console.log(\"time = \"+JSON.stringify(time))\r\n\r\n        let newTIme  = time.split(\" \")\r\n        let newTImeTImePart = newTIme[0]\r\n        let newTImeAmPmPart = newTIme[1]\r\n        console.log(\"newTImeTImePart = \"+newTImeTImePart)\r\n        console.log(\"newTImeAmPmPart = \"+newTImeAmPmPart)\r\n\r\n        let ngTIme = {}\r\n        let hourMinValue = newTImeTImePart.split(\":\")\r\n        let hour:any = hourMinValue[0]\r\n        let min:any = hourMinValue[1]\r\n        hour =  Number(hour)\r\n        min =  Number(min)\r\n        console.log(\"hour = \"+hour)\r\n        console.log(\"min = \"+min)\r\n        if(newTImeAmPmPart && newTImeAmPmPart.trim() == \"pm\"){\r\n          hour = hour + 12\r\n        }\r\n        \r\n        ngTIme['hour'] = Number(hour)\r\n        ngTIme['minute'] = Number(min)\r\n        ngTIme['second'] = 0\r\n        console.log(\"ngTIme = \"+JSON.stringify(ngTIme))\r\n        return ngTIme//{\"hour\":10,\"minute\":30,\"second\":0}\r\n      }else{\r\n        return time\r\n      }\r\n    }\r\n    convertTimeFormogo(time){\r\n//\":{\"hour\":22,\"minute\":20,\"second\":0}\r\n      let hour  = time['hour']\r\n      let min  = time['minute']\r\n      let amPm = \"am\"\r\n\r\n      if(hour >= 12){\r\n        hour = hour - 12\r\n        amPm = \"pm\"\r\n      }\r\n      \r\n      if(hour ==24 ){\r\n        hour = hour - 24\r\n        amPm = \"am\"\r\n      }\r\n      return hour+\":\"+min+\" \"+amPm\r\n    }\r\n    \r\n    fromJsDateToMongoDate(jsDate){\r\n\r\n      console.log(\" jsDate =\"+jsDate)\r\n      var dateParts = jsDate.split(Config.dateDelimitor);    \r\n    \r\n      console.log(\"before 1 add dateParts[0] =\"+dateParts[0])\r\n      console.log(\"dateParts[1] =\"+dateParts[1])\r\n      console.log(\" dateParts[2] =\"+dateParts[2])\r\n      return  dateParts[2]+Config.dateDelimitor+dateParts[1]+Config.dateDelimitor+dateParts[0]\r\n    \r\n      /*let utcD =   Date.UTC(dateParts[2], dateParts[1] - 1, dateParts[0],\r\n   0, 0, 0);\r\n\r\n       // return new Date(utcD); \r\n\r\n\r\n      var momentDate = moment(jsDate).format('YYYY-MM-DD[T00:00:00.000Z]')\r\n     // return momentDate; \r\n     return new Date(momentDate); \r\n     */\r\n\r\n    }\r\n    fromJsDateToLocationdateTimeFormat(jsDate){\r\n\r\n      console.log(\" jsDate =\"+jsDate)\r\n      var dateParts = jsDate.split(Config.dateDelimitor);    \r\n    \r\n      console.log(\"before 1 add dateParts[0] =\"+dateParts[0])\r\n      console.log(\"dateParts[1] =\"+dateParts[1])\r\n      console.log(\" dateParts[2] =\"+dateParts[2])\r\n      return  dateParts[2]+Config.dateDelimitor+dateParts[1]+Config.dateDelimitor+dateParts[0]   \r\n\r\n    }\r\n    convertToHumanDate(dbDate){\r\n      return  moment(dbDate).format('DD-MMM-YYYY');\r\n    }\r\n    validateFields(controls){\r\n        const error: AllValidationErrors = getFormValidationErrors(controls).shift();\r\n  \r\n        if (error) {\r\n          let text;\r\n      \r\n          console.log(\"error.control_name == \"+error.control_name)\r\n      \r\n          let controlName =  error.control_name //this.getText(error.\r\n         console.log(\"controlName == \"+controlName)\r\n          switch (error.error_name) {\r\n            case 'required': text =controlName+` is required!`; break;\r\n            case 'pattern': text = `${error.control_name} has wrong pattern!`; break;\r\n            case 'email': text = `${error.control_name} has wrong email format!`; break;\r\n            case 'minlength': text = `${error.control_name} has wrong length! Required length: ${error.error_value.requiredLength}`; break;\r\n            case 'areEqual': text = `${error.control_name} must be equal!`; break;\r\n            default: text = `${error.control_name}: ${error.error_name}: ${error.error_value}`;\r\n          }\r\n          this.form_fill_failure_msg = text;\r\n        }\r\n      \r\n      }\r\n      \r\n}\r\n\r\nexport interface AllValidationErrors {\r\n    control_name: string;\r\n    error_name: string;\r\n    error_value: any;\r\n  }\r\n  \r\n  export interface FormGroupControls {\r\n    [key: string]: AbstractControl;\r\n  }\r\n  \r\n export  function getFormValidationErrors(controls: FormGroupControls): AllValidationErrors[] {\r\n    let errors: AllValidationErrors[] = [];\r\n  \r\n   \r\n    Object.keys(controls).forEach(key => {\r\n      const control = controls[ key ];\r\n      console.log(\"key :==\"+ key)\r\n      if (control instanceof FormGroup) {\r\n        errors = errors.concat(getFormValidationErrors(control.controls));\r\n      }\r\n      const controlErrors: ValidationErrors = controls[ key ].errors;\r\n      if (controlErrors !== null) {\r\n        Object.keys(controlErrors).forEach(keyError => {\r\n          \r\n          errors.push({\r\n            control_name: key,\r\n            error_name: keyError,\r\n            error_value: controlErrors[ keyError ]\r\n          });\r\n        });\r\n      }\r\n    });\r\n    return errors;\r\n  }\r\n\r\n","import { animate, state, style, transition, trigger } from '@angular/animations';\r\n\r\nexport function routerTransition() {\r\n    return slideToRight();\r\n}\r\n\r\nexport function slideToRight() {\r\n    return trigger('routerTransition', [\r\n        state('void', style({})),\r\n        state('*', style({})),\r\n        transition(':enter', [\r\n            style({ transform: 'translateX(-100%)' }),\r\n            animate('0.5s ease-in-out', style({ transform: 'translateX(0%)' }))\r\n        ]),\r\n        transition(':leave', [\r\n            style({ transform: 'translateX(0%)' }),\r\n            animate('0.5s ease-in-out', style({ transform: 'translateX(100%)' }))\r\n        ])\r\n    ]);\r\n}\r\n"]}