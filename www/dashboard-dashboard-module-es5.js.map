{"version":3,"sources":["webpack:///src/app/layout/dashboard/dashboard-routing.module.ts","webpack:///src/app/layout/dashboard/dashboard.component.ts","webpack:///src/app/layout/dashboard/dashboard.component.html","webpack:///src/app/layout/dashboard/dashboard.module.ts"],"names":["routes","path","component","DashboardRoutingModule","forChild","imports","exports","DashboardComponent","router","toastr","dataService","loading","totalUser","openinvoice","totalDist","totalinvoice","distCoveredByDriver","currentDate","Date","toISOString","substr","currentMonth","currentYear","today","last7Days","setDate","getDate","dateBeforeWeek","beginningDayOfMonth","allDates","labelDays","monthDayslabel","monthDays","labelStatus","orderedByDate","orderedByStatus","appointmentList","arrangedOrderedByDate","costArrangedOrderedByDate","totalCost","totalDataByDate","totalDataByStatus","totalStatusByDate","ArrangedTotalDistanceCoveredByDate","invoiceChartType","invoiceChartLegend","invoiceChartLabels","invoiceChartOptions","scaleShowVerticalLines","responsive","invoiceChartData","data","barChartType","barChartLegend","barChartLabels","barChartOptions","barChartData","lineChartData","lineChartLabels","lineChartOptions","lineChartColors","backgroundColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","invoiceChartColors","lineChartLegend","lineChartType","getDaysOfMonth","getDaysInMonth","getMonth","fetchAllData","fetchDaysApointment","fetchMonthInvoices","fetchAllmonthsAppointment","firstDayOfMonth","format","lastDayOfMonth","dateRange","fromDate","toDate","Promise","resolve","reject","then","result","map","element","label","console","log","JSON","stringify","err","error","setTimeout","dbDate","basePath","Error","thisday","nextDay","i","push","month","year","date","objectArray","property","val1","val2","val3","reduce","acc","obj","key","parseFloat","dates","completedRidesDate","length","distanceCovered","cost","invoice","j","toFixed","getAllDatesRecord","value","valuesForAllDates","count","statusList","rides","status","finalVal","current","selector","templateUrl","styleUrls","animations","DashboardModule","forRoot","animationType","wanderingCubes","backdropBackgroundColour","backdropBorderRadius","primaryColour","secondaryColour","tertiaryColour","declarations"],"mappings":"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","file":"dashboard-dashboard-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { DashboardComponent } from './dashboard.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: DashboardComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule {\r\n}\r\n","import { Component, OnInit, NgZone } from '@angular/core';\r\nimport { routerTransition } from '../../router.animations';\r\n//import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n//import { Observable } from 'rxjs';\r\nimport *  as moment from 'moment';\r\nimport { Router } from '@angular/router';\r\n//import { map } from 'rxjs/operators';\r\n// import { ChartsComponent } from '../charts/charts.component';\r\nimport { ToastrManager } from 'ng6-toastr-notifications';\r\nimport { DataAccess } from 'src/app/services/data-access';\r\n\r\n@Component({\r\n    selector: 'app-dashboard',\r\n    templateUrl: './dashboard.component.html',\r\n    styleUrls: ['./dashboard.component.scss'],\r\n    animations: [routerTransition()]\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n    public loading : boolean = true;\r\n    userId: string;       \r\n    \r\n    firstDayOfMonth:any \r\n    lastDayOfMonth:any\r\n    public totalUser: number = 0;\r\n    public openinvoice: number = 0;\r\n    public totalDist: number = 0;\r\n    public totalinvoice: number = 0;\r\n    public distCoveredByDriver = [];\r\n    public currentDate: string = new Date().toISOString().substr(8,2);\r\n    public currentMonth: string = new Date().toISOString();\r\n    // public currentMonth: string = new Date().toISOString().substr(6,1);\r\n    public currentYear: string = new Date().toISOString().substr(0,4);\r\n    \r\n    public today : Date = new Date();\r\n    public last7Days:Date = new Date(new Date().setDate(new Date().getDate() - 7));\r\n    public dateBeforeWeek = new Date(new Date().setDate(new Date().getDate() - 7)).toISOString().substr(0,10);\r\n\r\n    public beginningDayOfMonth = new Date(new Date().setDate(new Date().getDate() - 31)).toISOString().substr(0,10);\r\n\r\n    public allDates = [];\r\n    public labelDays = [];\r\n    public monthDayslabel = [];\r\n    monthDays = []\r\n    public labelStatus = [];\r\n    public orderedByDate = [];\r\n    public orderedByStatus = [];\r\n    appointmentList = []\r\n    public arrangedOrderedByDate = [];\r\n\r\n    public costArrangedOrderedByDate = [];\r\n    public totalCost:number = 0;\r\n    public totalDataByDate = [];\r\n    public totalDataByStatus = [];\r\n    public totalStatusByDate = [];\r\n    public ArrangedTotalDistanceCoveredByDate = [];\r\n\r\n    // invoice Chart\r\n    public invoiceChartType: string = 'line';\r\n    public invoiceChartLegend: boolean = false;\r\n    public invoiceChartLabels: Array<any> = [];\r\n    public invoiceChartOptions: any = {\r\n        scaleShowVerticalLines: false,\r\n        responsive: true\r\n    };\r\n    public invoiceChartData: any[] = [\r\n        { data: []}\r\n    ];\r\n    //monthList:any =[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sept\",\"Oct\",\"Nov\",\"Dec\"]\r\n    // bar chart\r\n    public barChartType: string = 'bar';\r\n    public barChartLegend: boolean = true;\r\n    public barChartLabels: Array<any> = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sept\",\"Oct\",\"Nov\",\"Dec\"]\r\n    public barChartOptions: any = {\r\n        scaleShowVerticalLines: false,\r\n        responsive: true\r\n    };\r\n    public barChartData: any[] = [\r\n        { data: []}\r\n    ];\r\n        \r\n    // lineChart\r\n    public lineChartData: Array<any> = [\r\n        { data: [] }];\r\n    public lineChartLabels: Array<any> = [];\r\n    public lineChartOptions: any = {\r\n        responsive: true\r\n    };\r\n    public lineChartColors: Array<any> = [{\r\n        // grey\r\n        backgroundColor: 'rgba(148,159,177,0.2)',\r\n        borderColor: 'rgba(148,159,177,1)',\r\n        pointBackgroundColor: 'rgba(148,159,177,1)',\r\n        pointBorderColor: '#fff',\r\n        pointHoverBackgroundColor: '#fff',\r\n        pointHoverBorderColor: 'rgba(148,159,177,0.8)'\r\n    }];\r\n    \r\n    public invoiceChartColors: Array<any> = [{\r\n        // green\r\n        backgroundColor: 'rgba(83, 154, 125, 1)',\r\n        borderColor: 'rgba(85, 101, 138, 1)',\r\n        pointBackgroundColor: 'rgba(85, 101, 138, 1)',\r\n        pointBorderColor: '#fff',\r\n        pointHoverBackgroundColor: '#fff',\r\n        pointHoverBorderColor: 'rgba(148,159,177,0.4)'\r\n    }];\r\n\r\n    \r\n    public lineChartLegend: boolean = false;\r\n    public lineChartType: string = 'line';\r\n\r\n    constructor(\r\npublic router: Router,\r\n        public toastr: ToastrManager,\r\n        public dataService: DataAccess\r\n        \r\n    ) {\r\n/*\r\n        if (!localStorage.getItem('isLoggedin')) {\r\n            this.router.navigate([\"/login\"]);\r\n        }\r\n  */      \r\n        this.getDaysOfMonth()\r\n        this.getDaysInMonth(this.currentMonth, this.currentYear);\r\n    \r\n        // setting the month if its later than september\r\n        if((new Date().getMonth()+1)>=10) {\r\n            this.currentMonth = new Date().toISOString().substr(5,2);\r\n        }\r\n        else {\r\n            this.currentMonth = new Date().toISOString().substr(6,1);\r\n        }                        \r\n        this.invoiceChartLabels = this.monthDayslabel;                        \r\n        this.fetchAllData()\r\n\r\n    }\r\n    async fetchAllData(){\r\n        \r\n        await this.fetchDaysApointment()\r\n        await this.fetchMonthInvoices()\r\n        await this.fetchAllmonthsAppointment()\r\n\r\n        this.loading = false;\r\n    }\r\n    fetchMonthInvoices(){\r\n        try {         \r\n            \r\n            let firstDayOfMonth = moment(this.firstDayOfMonth).format('DD-MM-YYYY');\r\n            let lastDayOfMonth = moment(this.lastDayOfMonth).format('DD-MM-YYYY');\r\n           let dateRange = {fromDate:firstDayOfMonth,toDate:lastDayOfMonth,allDates:this.monthDays}\r\n\r\n         //  console.log(\"****** Date range   ===== **\"+JSON.stringify(dateRange))\r\n                    \r\n            return new Promise((resolve,reject) => {\r\n\r\n                    this.dataService.fetchMonthInvoices(dateRange).then((result:[]) => {\r\n            \r\n                        let data = result.map(element => element)\r\n\r\n                        this.invoiceChartData = [\r\n                        { data: data, label: 'Monthly Invoices' }\r\n                        ];\r\n                         console.log(\"****** invoice data   ===== **\"+JSON.stringify(data))\r\n                    \r\n                        resolve(data)                 \r\n                \r\n                    }, (err) => {\r\n                    //this.loading = false;\r\n                    resolve(err)\r\n                    console.log(err);\r\n                    });\r\n\r\n            });\r\n\r\n         \r\n           \r\n        }\r\n        catch(error) {\r\n            console.log('Error', error);\r\n        }\r\n    }\r\n    fetchDaysApointment(){\r\n        try {\r\n            \r\n            return new Promise((resolve,reject) => {\r\n               \r\n               \r\n                    \r\n                        this.dataService.fetchDaysApointment().then((result:[]) => {\r\n\r\n                            this.appointmentList = result.map(element => element)\r\n        \r\n                       // console.log(\"****** this.appointmentList   ===== **\"+JSON.stringify(this.appointmentList))\r\n                            resolve(this.appointmentList)                 \r\n                    \r\n                        }, (err) => {\r\n                            this.appointmentList = []\r\n                        //this.loading = false;\r\n                        resolve(err)\r\n                        console.log(err);\r\n                        });\r\n\r\n                \r\n\r\n              });\r\n\r\n         \r\n           \r\n        }\r\n        catch(error) {\r\n            console.log('Error', error);\r\n        }\r\n    }\r\n    fetchAllmonthsAppointment(){\r\n        try {\r\n            return new Promise((resolve,reject) => {\r\n               \r\n                setTimeout(() => {\r\n                    this.dataService.fetchAllmonthsAppointment().then((result:[]) => {\r\n            \r\n                        let data = result.map(element => element)\r\n\r\n                        this.barChartData = [\r\n                        { data: data, label: 'Monthly Appointments' }\r\n                        ];\r\n                        // console.log(\"****** this.barChartData   ===== **\"+JSON.stringify(this.barChartData))\r\n                    \r\n                        resolve(data)                 \r\n                \r\n                    }, (err) => {\r\n                    //this.loading = false;\r\n                    resolve(err)\r\n                    console.log(err);\r\n                    });\r\n                }, 500);\r\n              \r\n\r\n              });\r\n\r\n         \r\n           \r\n        }\r\n        catch(error) {\r\n            console.log('Error', error);\r\n        }\r\n    }\r\n\r\n    convertToHumanDate(dbDate){\r\n        return  moment(dbDate).format('DD-MMM-YYYY');\r\n    }\r\n    ngOnInit() {\r\n       \r\n    }\r\n\r\n    getGraphValues() {\r\n       \r\n    }\r\n\r\n    basePath(basePath: any) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    \r\n    // Getting all days of the current month\r\n\r\n    getDaysOfMonth(){\r\n      \r\n        let thisday: Date = new Date(this.beginningDayOfMonth);\r\n        this.firstDayOfMonth = new Date(this.beginningDayOfMonth);\r\n        this.allDates = [];\r\n        this.labelDays = [];\r\n        let nextDay\r\n        for (let i: number = 30; i>0; i--) {\r\n            nextDay = new Date(thisday.setDate(thisday.getDate() + 1));\r\n\r\n          //  console.log('nextDay.toISOString() == ', nextDay.toISOString());\r\n          // console.log('nextDay.toISOString() .substr(0,10) == ', nextDay.toISOString().substr(0,10));\r\n\r\n            //this.monthDayslabel.push(nextDay.toISOString().substr(0,10));\r\n            this.monthDayslabel.push(moment(nextDay).format(\"DD-MM-YY\"));\r\n            this.monthDays.push(moment(nextDay).format(\"DD-MM-YYYY\"));\r\n            \r\n            this.lastDayOfMonth = nextDay    \r\n        }\r\n        \r\n        return this.monthDayslabel;\r\n    }\r\n    getDaysInMonth(month, year) {\r\n        let thisday: Date = new Date(this.dateBeforeWeek);\r\n        this.allDates = [];\r\n        this.labelDays = [];\r\n        for (let i: number = 7; i>0; i--) {\r\n            let nextDay = new Date(thisday.setDate(thisday.getDate() + 1));\r\n\r\n          //  console.log('nextDay.toISOString() == ', nextDay.toISOString());\r\n          //  console.log('nextDay.toISOString() .substr(0,10) == ', nextDay.toISOString().substr(0,10));\r\n\r\n            this.labelDays.push(nextDay.toISOString().substr(0,10));\r\n            this.allDates.push({\r\n                date: nextDay.toISOString().substr(0,10)\r\n            });\r\n        }\r\n        return this.labelDays;\r\n    }\r\n    // Reduce the array by dates\r\n    reduceByDate(objectArray, property, val1, val2, val3) {\r\n        return objectArray.reduce((acc, obj)=> {\r\n            let key = obj[property];\r\n            if (!acc[key]) {\r\n                acc[key] = [];\r\n                acc[key].push(obj);\r\n            }\r\n            else {\r\n                obj[val1] = obj[val1]+parseFloat(acc[key][0][val1]);\r\n                obj[val2] = obj[val2]+parseFloat(acc[key][0][val2]);\r\n                obj[val3] = obj[val3]+parseFloat(acc[key][0][val3]);\r\n                acc[key][0] = obj;\r\n            }\r\n            this.orderedByDate = acc;\r\n            // this.distCoveredByDriver = acc;\r\n            return acc;\r\n        }, {});\r\n    }\r\n\r\n    // Formated data\r\n    formatedData(orderedByDate) {\r\n        let arrangedOrderedByDate = [];\r\n        for (let property in orderedByDate) {\r\n            arrangedOrderedByDate.push(orderedByDate[property][0]);\r\n        }\r\n        this.arrangedOrderedByDate = arrangedOrderedByDate;\r\n        return arrangedOrderedByDate;\r\n    }\r\n\r\n    getAllDatesRecord(dates, completedRidesDate) {\r\n        this.totalDist = 0;\r\n        this.totalCost = 0;\r\n        this.totalinvoice = 0;\r\n        for (let i = 0; i < dates.length; i++) {\r\n            dates[i].distanceCovered = 0;\r\n            dates[i].cost = 0;\r\n            dates[i].invoice = 0;\r\n            for (let j = 0; j < completedRidesDate.length; j++) {\r\n                if (dates[i].date == completedRidesDate[j].date) {\r\n                    dates[i].distanceCovered = completedRidesDate[j].distanceCovered;\r\n                    dates[i].cost = completedRidesDate[j].cost;\r\n                    dates[i].invoice = completedRidesDate[j].invoice;\r\n                }\r\n            }\r\n            this.totalDataByDate = dates;\r\n            this.totalDist += dates[i].distanceCovered;\r\n            this.totalCost += dates[i].cost;\r\n            this.totalinvoice += dates[i].invoice;\r\n        }\r\n        this.totalDist = parseFloat(this.totalDist.toFixed(2));\r\n        return dates;\r\n    }\r\n\r\n    getValuesForAllDates(getAllDatesRecord, value) {\r\n        let valuesForAllDates = [];\r\n        for(let i=0; i<getAllDatesRecord.length; i++) {\r\n            valuesForAllDates.push(getAllDatesRecord[i][value])\r\n        }\r\n        return valuesForAllDates;\r\n    }\r\n    \r\n    // /////////\r\n    reduceStatusByDate(objectArray, property) {\r\n        return objectArray.reduce((acc, obj)=> {\r\n            let key = obj[property];\r\n            let count = 1;\r\n            if (!acc[key]) {\r\n                acc[key] = [];\r\n                obj.count = 1\r\n                acc[key].push(obj);\r\n            }\r\n            else {\r\n                obj.count = count+1;\r\n                acc[key][0] = obj;\r\n            }\r\n            this.orderedByStatus = acc;\r\n            return acc;\r\n        }, {});\r\n    }\r\n    \r\n    getAllStatusRecord(statusList, rides) {\r\n        for (let i = 0; i < statusList.length; i++) {\r\n            statusList[i].count = 0;\r\n            for (let j = 0; j < rides.length; j++) {\r\n                if (statusList[i].status == rides[j].status) {\r\n                    statusList[i].count = rides[j].count;\r\n                }\r\n            }\r\n            this.totalDataByStatus = statusList;\r\n        }\r\n        return statusList;\r\n    }\r\n\r\n    getStatusKey(value) {\r\n        var finalVal;\r\n        \r\n        return finalVal;\r\n    }\r\n\r\n    \r\n    convertStatusLabel(labelStatus) {\r\n        var finalVal;\r\n        \r\n    }\r\n\r\n   \r\n\r\n    getTotalUsers() {\r\n        let count: number = 0;\r\n       \r\n    }\r\n\r\n    getTodaysOpenRides() {\r\n        let count: number = 0;\r\n        let current = this.today.toISOString().substr(0,10);\r\n       \r\n    }\r\n}","<div [@routerTransition]>\r\n    \r\n    <br />\r\n    <div class=\"row\">      \r\n      <div class=\"col col-xl-6 col-lg-6\">\r\n        <h6><b>Total appointments each month</b></h6>\r\n        <div>\r\n          <canvas baseChart [datasets]=\"barChartData\" [labels]=\"barChartLabels\" [colors]=\"invoiceChartColors\" [options]=\"barChartOptions\" [legend]=\"barChartLegend\" [chartType]=\"barChartType\">\r\n          </canvas>\r\n        </div>\r\n      </div>\r\n      <div class=\"col col-xl-6 col-lg-6\">\r\n        <h6><b>Invoices in a month</b></h6>\r\n        <div>\r\n          <canvas baseChart [datasets]=\"invoiceChartData\" [labels]=\"invoiceChartLabels\" [options]=\"invoiceChartOptions\" [legend]=\"invoiceChartLegend\" [colors]=\"invoiceChartColors\" [chartType]=\"invoiceChartType\">\r\n          </canvas>\r\n        </div>\r\n      </div>      \r\n      \r\n      <div class=\"col-md-12\">\r\n        <div class=\"card mb-3\">\r\n            <div class=\"card-header custom_text\">\r\n              Today's Appointments\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <div class=\"row\">\r\n                <div class=\"col col-md-12\">\r\n                  <div class=\"table-responsive\">\r\n                    <table class=\"table\">\r\n                      <thead>\r\n                      <tr>\r\n                        <th>Location</th>\r\n                        <th>Patient Name</th>                        \r\n                        <th>Appointment Status</th>\r\n                        <th>Appointment Date</th>                        \r\n                        <th>Appointment Time</th>                        \r\n                      </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr *ngFor=\"let appointment of appointmentList; let i = index\">\r\n                          <td>\r\n                            \r\n                            <b>Address &nbsp; &nbsp; :&nbsp; &nbsp; </b>{{appointment?.location?.address}}<br>\r\n                            <b>Area&nbsp; &nbsp;  :&nbsp; &nbsp; </b>{{appointment?.location?.area}}<br>\r\n                            <b>City &nbsp; &nbsp; :&nbsp; &nbsp; </b>{{appointment?.location?.city}}</td>\r\n                          <td>{{appointment?.patient?.name}}</td>\r\n                          <td>{{appointment?.status}}</td>\r\n                          <td >{{convertToHumanDate(appointment.appointmentDate)}}</td>\r\n                          \r\n                          <td>{{appointment?.appointmentTime}}</td>\r\n                        </tr>\r\n                      </tbody>\r\n                      <tbody *ngIf=\"(appointmentList && appointmentList.length==0)\">\r\n                        <tr>\r\n                          <td colspan=\"7\" align = \"center\">No record available</td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              <br />\r\n              </div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!-- Pre loader -->\r\n  <div class=\"my-container\">\r\n    <ngx-loading [show]=\"loading\"></ngx-loading>\r\n  </div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { DashboardRoutingModule } from './dashboard-routing.module';\r\nimport { DashboardComponent } from './dashboard.component';\r\nimport { PageHeaderModule } from './../../shared';\r\nimport { ChartsModule as Ng2Charts } from 'ng2-charts';\r\n//import { LoadingModule } from 'ngx-loading';\r\n\r\nimport { RptModule } from '../../shared';\r\nimport { NgxLoadingModule, ngxLoadingAnimationTypes } from 'ngx-loading';\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        DashboardRoutingModule,\r\n        PageHeaderModule,\r\n        RptModule,\r\n        Ng2Charts,\r\n      //  LoadingModule,\r\n        FormsModule,\r\n        NgxLoadingModule.forRoot({\r\n            animationType: ngxLoadingAnimationTypes.wanderingCubes,\r\n            backdropBackgroundColour: 'rgba(0,0,0,0.1)', \r\n            backdropBorderRadius: '4px',\r\n            primaryColour: '#ffffff', \r\n            secondaryColour: '#ffffff', \r\n            tertiaryColour: '#ffffff'\r\n        })\r\n    ],\r\n    declarations: [\r\n        DashboardComponent,\r\n    ]\r\n})\r\nexport class DashboardModule {}\r\n"]}