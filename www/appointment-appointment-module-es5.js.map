{"version":3,"sources":["webpack:///src/app/layout/appointment/appointment-routing.module.ts","webpack:///src/app/layout/appointment/appointment.component.html","webpack:///src/app/layout/appointment/appointment.component.ts","webpack:///src/app/layout/appointment/appointment.module.ts"],"names":["routes","path","component","AppointmentRoutingModule","forChild","imports","exports","AppointmentComponent","datePipe","router","modal","toastr","_fb","dataService","loading","keyword","disableSatusDropDown","data","id","name","keywordLocation","keywordDoctor","patientList","locationList","doctorList","userKind","normalFiltereduserListArr","items","pageSize","RECORDSIZE","pageNo","tempArray","appointmentObject","locationId","patientId","doctorId","appointmentDate","appointmentTime","status","active","appointmentObjectBase","openingMeridian","user","role","doctor","appointment","view","localStorage","getItem","navigate","appointmentFormGroup","group","required","locationName","doctorName","patientName","fetchAppointments","item","get","patchValue","val","length","fetchAllPatients","then","result","map","element","err","fetchAllLocations","fetchAllDoctors","e","mode","Object","assign","modalReference","open","appointmentFormModal","paientName","fetchAppointmentsCount","valid","submitAttempt","validateFields","controls","fromJsDateToMongoDate","convertTimeFormogo","addAppointment","closeModal","form_fill_failure_msg","successToastr","updateAppointment","Promise","resolve","fetchPatientById","error","practiceLocationId","fetchLocationById","fetchDoctrById","backTONgTImeFOrmat","transform","event","applyFilter","pageOfItems","perPage","fetchPatients","totalDocRecords","forEach","index","value","userInfo","appointmentId","_id","pageChanged","selector","templateUrl","styleUrls","providers","AppointmentModule","forRoot","animationType","wanderingCubes","backdropBackgroundColour","backdropBorderRadius","primaryColour","secondaryColour","tertiaryColour","provide","useFactory","declarations"],"mappings":"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","file":"appointment-appointment-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AppointmentComponent } from './appointment.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: AppointmentComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppointmentRoutingModule { }\r\n","<div>\r\n  <app-page-header [heading]=\"'Appointments'\" [icon]=\"'fa-user'\"></app-page-header>\r\n</div>\r\n\r\n  <div class=\"col-md-12\" >\r\n      \r\n          <!--div class=\"card-header\">\r\n              User type\r\n          </div-->\r\n          \r\n          \r\n                \r\n                <div class=\"col-md-12 text-right \" *ngIf=\"user.role.doctor.appointment.create\">                      \r\n                  <div class=\"content\">\r\n                    <button type=\"button\" class=\"btn btn-dark\" (click)=\"openAddAppointmentDialog()\">Raise Appointment Request</button>\r\n                  </div>\r\n              </div>\r\n             \r\n          \r\n          \r\n\r\n      <div class=\"card-body table-responsive marginLeft\"> <span class=\"pb-3 \"><b> List of existing {{userKind}}s </b>  </span>\r\n        <table class=\"table table-striped table-bordered table-sm\">\r\n          <thead>\r\n          <tr>\r\n            <th>Location</th>\r\n              <th>Patient Name</th>\r\n              <th>Appointment Date</th>\r\n              <th>Appointment Time</th>\r\n\t            \r\n              <th>Status</th>\r\n              <th *ngIf=\"user.role.doctor.appointment.edit\">Enable/Disable</th>\r\n              \r\n              <th>Created Date</th>\r\n              <th *ngIf=\"user.role.doctor.appointment.edit\">Edit</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n              <tbody *ngIf=\"normalFiltereduserListArr && normalFiltereduserListArr.length>0\">\r\n            \r\n              <tr *ngFor=\"let obj of normalFiltereduserListArr | paginate: { id:'forappintment', itemsPerPage: pageSize, currentPage: pageNo, totalItems: totalDocRecords }\">              \r\n                <td>\r\n                  <table class='table borderless'><tr><td class=\"customdiv\"><b>Address</b></td><td>{{obj?.location?.address}}</td></tr>\r\n\r\n                    <tr><td class=\"customdiv\"><b>Area</b></td><td>{{obj?.location?.area}}</td></tr>\r\n\r\n                    <tr><td class=\"City\"><b>City</b></td><td>{{obj?.location?.city}}</td></tr>\r\n                  \r\n                  </table>       \r\n                  <!--b><span class=\"customdiv\">Address:</span></b><br>\r\n                  <b><span class=\"customdiv\">Area:</span></b>{{obj?.location?.area}}<br>\r\n                  <b><span class=\"customdiv\">City:</span></b>{{obj?.location?.city}}-->\r\n                </td>\r\n                  <td>{{obj?.patient?.name}}</td>\r\n                  <td >{{convertToHumanDate(obj.appointmentDate)}}</td>\r\n              <td>{{obj.appointmentTime}}</td>\r\n              <td>{{obj.status}}</td>\r\n              <!--td *ngIf=\"user.role.doctor.appointment.edit\"> \r\n                <span  *ngIf=\"obj.active\">Enabled</span>\r\n                <span *ngIf=\"!obj.active\">Disabled</span>\r\n            </td-->\r\n              <td *ngIf=\"user.role.doctor.appointment.edit\">               \r\n                <ui-switch [(ngModel)]=\"obj.active\" (change)=\"updateStatus($event, obj)\"></ui-switch>\r\n                    \r\n              </td>              \r\n<td >{{convertToHumanDate(obj.createdDate)}}</td>\r\n\r\n<td *ngIf=\"user.role.doctor.appointment.edit\" ><button class=\"btn btn-dark\" (click)=\"openForeditappointment(obj)\"> Edit </button></td>    \r\n\r\n            </tr>\r\n          </tbody>\r\n          <div class=\"col-md-12 text-left clearfix \">\r\n          <pagination-controls class=\"my-pagination marginLeft\"  id=\"forappintment\" \r\n               (pageChange)=\"pageChanged($event)\"\r\n                      (pageBoundsCorrection)=\"pageChanged($event)\"                      \r\n                      directionLinks=\"true\"               maxSize=\"9\"\r\n                      directionLinks=\"true\"\r\n                      autoHide=\"true\"\r\n                      responsive=\"true\"\r\n                      previousLabel=\"Prev\"\r\n                      nextLabel=\"Next\"\r\n                      screenReaderPaginationLabel=\"Pagination\"\r\n                      screenReaderPageLabel=\"page\"\r\n                      screenReaderCurrentLabel=\"You're on page\"></pagination-controls >\r\n          </div>\r\n          <tbody *ngIf=\"(normalFiltereduserListArr && normalFiltereduserListArr.length==0)\">\r\n              <tr>\r\n                <td colspan=\"7\" align = \"center\">No record available</td>\r\n              </tr>\r\n            </tbody>\r\n        </table>\r\n      </div>\r\n      \r\n\r\n\r\n\r\n      <ng-template #appointmentFormModal let-close=\"close\">\r\n        <form [formGroup]=\"appointmentFormGroup\" class=\"custom_timebox p-0\">\r\n            <div class=\"modal-header py-1\">\r\n                    <h4 class=\"modal-title headerTitle mb-0\">{{mode | titlecase}} Appointment</h4>\r\n                    <button type=\"button\" class=\"close\" (click)=\"closeModal();\">×</button>\r\n              </div>\r\n              <div class=\"modal-body\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-12\">\r\n                      <div class=\"form-group\">\r\n                          <label class=\"labelTitles\">Select Patient </label>\r\n                          <!--select formControlName=\"patientId\" [(ngModel)]=\"appointmentObject.patientId\" class=\"form-control\" name=\"patientId\"\r\n                              (change)=\"getPatient()\">\r\n                            \r\n                              <option *ngFor=\"let patient of patientList\" value=\"{{patient._id}}\" class=\"labelValue\">{{patient.name}}</option>\r\n                          </select-->\r\n                                          \r\n                        <ng-autocomplete \r\n                            [data]=\"patientList\"\r\n                            [(ngModel)] = \"paientName\"\r\n                            formControlName=\"patientName\"\r\n                            [searchKeyword]=\"keyword\"\r\n                            (selected)='patientSelectEvent($event)'\r\n                            (inputChanged)='onChangePatientSearch($event)'\r\n                            (inputFocused)='onFocusedPAtient($event)'\r\n                            [itemTemplate]=\"itemTemplate\"\r\n                            [notFoundTemplate]=\"notFoundTemplate\">                                 \r\n                        </ng-autocomplete>\r\n                        \r\n                          <ng-template #itemTemplate id=\"itemTemplate\" let-item>\r\n                            <a [innerHTML]=\"item.name\"></a>\r\n                            </ng-template>\r\n                            \r\n                           <ng-template #notFoundTemplate let-notFound>\r\n                              <div [innerHTML]=\"notFound\"></div>\r\n                           </ng-template>\r\n  \r\n\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n                    <div class=\"form-group\">\r\n                        <label class=\"labelTitles\">Select Location </label>\r\n                        <!--select formControlName=\"locationId\"  [(ngModel)]=\"appointmentObject.locationId\"  class=\"form-control\" name=\"locationId\"\r\n                            (change)=\"getLocation()\">\r\n                           \r\n                            <option *ngFor=\"let location of locationList\" value=\"{{location._id}}\" class=\"labelValue\">{{location.longName}}</option>\r\n                        </select-->\r\n\r\n                        <ng-autocomplete \r\n                        [data]=\"locationList\"\r\n                        [(ngModel)] = \"locationName\"\r\n                        formControlName=\"locationName\"\r\n                        [searchKeyword]=\"keywordLocation\"\r\n                        (selected)='locationSelectEvent($event)'\r\n                        (inputChanged)='onChangeLocationSearch($event)'\r\n                        (inputFocused)='onFocusedLocation($event)'\r\n                        [itemTemplate]=\"itemTemplate\"\r\n                        [notFoundTemplate]=\"notFoundTemplate\">                                 \r\n                      </ng-autocomplete>\r\n                   \r\n                      \r\n                      <ng-template #itemTemplate id=\"itemTemplate\" let-item>\r\n                        <a [innerHTML]=\"item.name\"></a>\r\n                        </ng-template>\r\n\r\n                        <ng-template #notFoundTemplate let-notFound>\r\n                        <div [innerHTML]=\"notFound\"></div>\r\n                        </ng-template>\r\n                        \r\n                       \r\n                    </div>\r\n                </div>\r\n            </div>\r\n                \r\n            <div class=\"row\">\r\n              <div class=\"col-md-12\">\r\n                  <div class=\"form-group\">\r\n                      <label class=\"labelTitles\">Select Doctor </label>\r\n                      <!--select formControlName=\"locationId\"  [(ngModel)]=\"appointmentObject.locationId\"  class=\"form-control\" name=\"locationId\"\r\n                          (change)=\"getLocation()\">\r\n                         \r\n                          <option *ngFor=\"let location of locationList\" value=\"{{location._id}}\" class=\"labelValue\">{{location.longName}}</option>\r\n                      </select-->\r\n\r\n                      <ng-autocomplete \r\n                      [data]=\"doctorList\"\r\n                      [(ngModel)] = \"doctorName\"\r\n                      formControlName=\"doctorName\"\r\n                      [searchKeyword]=\"keywordDoctor\"\r\n                      (selected)='doctorSelectEvent($event)'\r\n                      (inputChanged)='doctorLocationSearch($event)'\r\n                      \r\n                      [itemTemplate]=\"itemTemplate\"\r\n                      [notFoundTemplate]=\"notFoundTemplate\">                                 \r\n                    </ng-autocomplete>\r\n                 \r\n                    \r\n                    <ng-template #itemTemplate id=\"itemTemplate\" let-item>\r\n                      <a [innerHTML]=\"item.name\"></a>\r\n                      </ng-template>\r\n                      <ng-template #notFoundTemplate let-notFound>\r\n                      <div [innerHTML]=\"notFound\"></div>\r\n                      </ng-template>\r\n                      \r\n                     \r\n                  </div>\r\n              </div>\r\n          </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-md-12\">\r\n                  <div class=\"form-group\">\r\n                      <label class=\"labelTitles\">Status </label>\r\n                      <div *ngIf=\"mode=='edit'\">\r\n                      <select formControlName=\"status\"  [(ngModel)]=\"appointmentObject.status\"  class=\"form-control\" name=\"locationId\"\r\n                          >                         \r\n                          <option value=\"Confirm\" class=\"labelValue\">Confirm</option>\r\n                          <option value=\"Reschedule\" class=\"labelValue\">Reschedule</option>\r\n                          <option value=\"Reject\" class=\"labelValue\">Reject</option>                          \r\n                          <option value=\"Requested\" class=\"labelValue\">Requested</option>                          \r\n                      </select>\r\n                    </div>\r\n                    <div *ngIf=\"mode=='add'\">\r\n                      <input class=\"form-control labelValue\"   disabled [(ngModel)]=\"appointmentObject.status\"  placeholder=\"Requested\">\r\n                    </div>\r\n                     \r\n                  </div>\r\n              </div>\r\n          </div>\r\n              \r\n\r\n\r\n                <div class=\"row \">\r\n                  <div class=\"col-md-12 form-group\">\r\n                      <label class=\"labelTitles\"><b>Date Of Appointment</b></label>\r\n                  </div>\r\n                  <!--pattern=\"\\d{1,2}/\\d{1,2}/\\d{4}\"-->\r\n                  <div class=\"col-md-12 marginTop\">\r\n                          <input type=\"date\"   class=\"form-control\" [(ngModel)]=\"appointmentObject.appointmentDate\" formControlName=\"appointmentDate\"\r\n                          placeholder=\"Enter AppointmentDate\">\r\n                          \r\n                   </div>\r\n            </div>\r\n\r\n            <div class=\"row \">\r\n              <div class=\"col-md-12 form-group\">\r\n              <label class=\"labelValue\">Appointment Time</label>\r\n              <ngb-timepicker formControlName=\"appointmentTime\" [(ngModel)]=\"appointmentObject.appointmentTime\" [meridian]=\"openingMeridian\">\r\n              </ngb-timepicker>\r\n              <div class=\"invalid-feedback d-block\"\r\n                  *ngIf=\"appointmentFormGroup.controls.appointmentTime.hasError('required')\">Invalid\r\n                  time</div>\r\n          </div>\r\n        </div>\r\n\r\n             </div>\r\n             <div class=\"modal-footer\">\r\n                <button [disabled]=\"!appointmentFormGroup.valid\" type=\"button\" class=\"btn btn-primary m-10\"\r\n                    (click)=\"save();\">Save</button>\r\n                <button type=\"button\" class=\"btn btn-primary m-10\" (click)=\"closeModal();\">Cancel</button>\r\n            </div>\r\n        </form>\r\n        <p *ngIf=\"submitAttempt\" class=\"cutomeerrortext\">\r\n                \r\n         <span class=\"redcolor ml-2\"><i class=\"fa fas fa-exclamation\"></i><b>&nbsp;Fix The Error : </b></span> {{form_fill_failure_msg}}\r\n          \r\n        </p>\r\n</ng-template>\r\n\r\n<!--jw-pagination [items]=\"items\" (changePage)=\"onChangePage($event)\"></jw-pagination-->\r\n\r\n<!--div class=\"my-container\">\r\n  <ngx-loading [show]=\"loading\"></ngx-loading>\r\n</div-->\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { Component, OnInit, NgZone, ViewChild, TemplateRef, ElementRef} from '@angular/core';\r\n\r\nimport { ToastrManager } from 'ng6-toastr-notifications';\r\nimport {  NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgbAccordion } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Router } from '@angular/router';\r\nimport *  as moment from 'moment';\r\nimport { DataAccess } from 'src/app/services/data-access';\r\nimport { Config } from '../../config';\r\n\r\n\r\nimport { BaseComponent } from 'src/BaseComponent';\r\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { DatePipe } from '@angular/common';\r\n@Component({\r\n  selector: 'app-appointment',\r\n  templateUrl: './appointment.component.html',\r\n  styleUrls: ['./appointment.component.scss'],\r\n  providers : [NgbModal]\r\n})\r\nexport class AppointmentComponent extends BaseComponent implements OnInit {\r\n\r\n  @ViewChild('fileInputDemoPhoto') fileInputDemoPhoto :ElementRef;;\r\n  public loading:boolean = true;\r\n  public closeResult: string;\r\n  keyword = 'name';\r\n  disableSatusDropDown:boolean = false\r\n  data = [\r\n     {\r\n       id: 1,\r\n       name: 'Usa'\r\n     },\r\n     {\r\n       id: 2,\r\n       name: 'England'\r\n     }\r\n  ];\r\n  keywordLocation = \"name\"\r\n  keywordDoctor = \"name\"\r\n  patientList:any = []\r\n  locationList:any = []\r\n  doctorList:any  = []\r\n  public defaultPagination: number;\r\n  public advancedPagination: number;\r\n  public paginationSize: number;\r\n  public itemsPerPage : number;\r\n  public disabledPagination: number;\r\n  public isDisabled: boolean;\r\n  public collectionSize: number;\r\n  public currentPage: number;\r\n  paientName:any\r\n  locationName:any\r\n  doctorName:any\r\n  @ViewChild('itemTemplate') itemTemplateRef: ElementRef;\r\n  @ViewChild('acc') accordionComponent: NgbAccordion;\r\n  public userKind:string=\"appointment\"\r\n  normalFiltereduserListArr:any = [];\r\n  @ViewChild('content') content: TemplateRef<any>;   \r\n   items = [];\r\n   @ViewChild('appointmentFormModal') appointmentFormModal: TemplateRef<any>;\r\n   pageOfItems: Array<any>;\r\n  public pageSize = Config.RECORDSIZE;\r\n  public pageNo = 1\r\n  tempArray: any[] = [];\r\n  totalDocRecords:any \r\n  appointmentFormGroup: FormGroup;\r\n  totalPatientRecords:any\r\n  customAppointmenttime : {\r\n    hour: 10,\r\n    minute: 20,\r\n\r\n};\r\n  appointmentObject =  \r\n  {    \r\n    locationId : \"\",\r\n    patientId : \"\",\r\n    doctorId : \"\",\r\n    appointmentDate : null,\r\n    appointmentTime : \"10:30 am\",\r\n    status : \"Requested\",\r\n    active : true    \r\n  }\r\n\r\n  appointmentObjectBase =  \r\n  {    \r\n    locationId : \"\",\r\n    patientId : \"\",\r\n    doctorId : \"\",\r\n    appointmentDate : null,\r\n    appointmentTime :  \"10:30 am\",\r\n    status : \"Requested\",\r\n    active : true    \r\n  }\r\n  \r\n  openingMeridian : boolean = true;\r\n\r\n  constructor(\r\n    private datePipe : DatePipe,\r\n    public router: Router,\r\n    private modal: NgbModal,\r\n    public toastr: ToastrManager,\r\n    private _fb: FormBuilder,    \r\n    public dataService: DataAccess,\r\n    \r\n    \r\n  ) {\r\n    super(router)\r\n  //  this.customAppointmenttime.hour = 9\r\n   // this.customAppointmenttime.minute = 10\r\n\r\n    if(!this.user.role.doctor.appointment.view){\r\n      return\r\n    }\r\n    if (!localStorage.getItem('isLoggedin')) {\r\n      this.router.navigate([\"/login\"]);\r\n    }\r\n    \r\n    this.appointmentFormGroup = _fb.group({\r\n      locationId: new FormControl(this.appointmentObject.locationId, Validators.required),\r\n      locationName: new FormControl(''),\r\n      doctorId: new FormControl(this.appointmentObject.doctorId, Validators.required),\r\n      doctorName: new FormControl(''),\r\n      patientId: new FormControl(this.appointmentObject.patientId, Validators.required),\r\n      patientName: new FormControl(''),\r\n      appointmentDate: new FormControl(this.appointmentObject.appointmentDate, Validators.required),\r\n      appointmentTime: new FormControl(this.appointmentObject.appointmentTime, Validators.required),\r\n      status: new FormControl(this.appointmentObject.status)\r\n    });\r\n\r\n    //this.appointmentFormGroup.valueChanges.subscribe(data => //console.log('form changes', data));\r\n    this.loading = false;    \r\n    this.fetchAppointments()   \r\n    \r\n  }\r\n  getLocation(){\r\n\r\n  }\r\n  \r\n  patientSelectEvent(item) {\r\n    if(item){\r\n    this.appointmentFormGroup.get('patientId').patchValue(item['_id']);\r\n    this.appointmentObject.patientId = item['_id']\r\n    ////console.log(\" inside patientSelectEvent \"+JSON.stringify(item))\r\n    //console.log(\" inside patientSelectEvent \"+JSON.stringify(item))\r\n    }\r\n    // do something with selected item\r\n  }\r\n \r\n  onChangePatientSearch(val: string) {\r\n    //console.log(\" inside onChangePatientSearch val \"+val)\r\n    if(val && val.length >2 ){\r\n    let data = {name:val}\r\n    this.dataService.fetchAllPatients(data).then((result:[]) => {\r\n      this.patientList = result.map(element => element)\r\n    }, (err) => {\r\n        //console.log(err);\r\n    });\r\n    }\r\n  }\r\n \r\n   \r\n  locationSelectEvent(item) {\r\n    if(item){\r\n    this.appointmentFormGroup.get('locationId').patchValue(item['_id']);\r\n    this.appointmentObject.locationId = item['_id']\r\n    //console.log(\" inside locationSelectEvent \"+JSON.stringify(item))\r\n    }\r\n    // do something with selected item\r\n  }\r\n \r\n  onChangeLocationSearch(val: string) {\r\n    //console.log(\" inside onChangePatientSearch val \"+val)\r\n   // if(val && val.length >2 ){\r\n    let data = {name:val}\r\n    this.dataService.fetchAllLocations(data).then((result:[]) => {\r\n      this.locationList = result.map(element => element)\r\n    }, (err) => {\r\n        //console.log(err);\r\n    });\r\n   // }\r\n  }\r\n \r\n  \r\n  doctorSelectEvent(item) {\r\n    if(item){\r\n    this.appointmentFormGroup.get('doctorId').patchValue(item['_id']);\r\n    this.appointmentObject.doctorId = item['_id']\r\n    //console.log(\" inside locationSelectEvent \"+JSON.stringify(item))\r\n    }\r\n    // do something with selected item\r\n  }\r\n \r\n  doctorLocationSearch(val: string) {\r\n    //console.log(\" inside onChangePatientSearch val \"+val)\r\n   // if(val && val.length >2 ){\r\n    let data = {name:val}\r\n    this.dataService.fetchAllDoctors(data).then((result:[]) => {\r\n      this.doctorList = result.map(element => element)\r\n    }, (err) => {\r\n        //console.log(err);\r\n    });\r\n   // }\r\n  }\r\n  \r\n  onFocusedLocation(e){\r\n\r\n    //console.log(\" inside onFocusedLocation e \"+e)\r\n    // do something w\r\n  }\r\n\r\n  onFocusedPAtient(e){\r\n\r\n    //console.log(\" inside onFocusedPAtient e \"+e)\r\n    // do something w\r\n  }\r\n\r\n  openAddAppointmentDialog(){\r\n    this.mode = \"add\"\r\n    this.disableSatusDropDown = true\r\n    this.appointmentObject =Object.assign({}, this.appointmentObjectBase); \r\n    this.modalReference = this.modal.open(this.appointmentFormModal);\r\n  }\r\n  getPatient(){\r\n\r\n  }\r\n  /*\r\n  ngAfterViewInit(){\r\n    this.dataService.fetchAllPatients().then((result:[]) => {\r\n      this.patientList = result.map(element => element)\r\n    }, (err) => {\r\n        //console.log(err);\r\n    });\r\n\r\n    this.dataService.fetchAllLocations().then((result:[]) => {\r\n      this.locationList = result.map(element => element)\r\n    }, (err) => {\r\n    //console.log(err);\r\n    });\r\n  }\r\n  */\r\n \r\n  \r\n  openAddappointmentDialog(){\r\n    this.mode = \"add\"\r\n    this.paientName = ''\r\n    this.locationName = ''\r\n    this.doctorName = ''\r\n    this.modalReference = this.modal.open(this.appointmentFormModal);\r\n  }\r\n  ngOnInit(){\r\n\r\n\r\n    if (!localStorage.getItem('isLoggedin')) {\r\n      this.router.navigate([\"/login\"]);\r\n    }\r\n\r\n  \r\n\r\n    //this.pageSize = Config.RECORDSIZE;\r\n    //this.pageNo = 1\r\n    this.fetchAppointmentsCount()  \r\n    this.fetchAppointments()    \r\n    \r\n //   this.items = Array(150).fill(0).map((x, i) => ({ id: (i + 1), name: `Item ${i + 1}`})\r\n  };\r\n  save(){\r\n//alert(\"mode: \"+this.mode)\r\n   \r\n\r\n    if(!this.appointmentFormGroup.valid){\r\n        this.submitAttempt = true;        \r\n        this.validateFields(this.appointmentFormGroup.controls)                   \r\n        return; \r\n    } \r\n    if(this.appointmentObject.appointmentDate && this.appointmentObject.appointmentDate!=\"\"){\r\n//      this.appointmentObject.dateOfBirth = this.fromJsDateToMongoDate(this.appointmentFormGroup.controls.dateOfBirth.value)\r\n      this.appointmentObject.appointmentDate = this.fromJsDateToMongoDate(this.appointmentObject.appointmentDate)    \r\n    }\r\n   \r\n    this.appointmentObject.appointmentTime = this.convertTimeFormogo(this.appointmentObject.appointmentTime)\r\n\r\n    \r\n\r\n    \r\n    if(this.mode == \"add\"){\r\n      this.appointmentObject.status = \"Requested\"\r\n      //console.log(\"this.appointmentObject for add == \"+JSON.stringify(this.appointmentObject))\r\n      this.dataService.addAppointment(this.appointmentObject).then((result) => {                \r\n        //  //console.log(\"result after adduser == \"+JSON.stringify(result))\r\n          this.fetchAppointments()\r\n          this.mode = \"add\"\r\n          this.closeModal()\r\n          this.form_fill_failure_msg = \"\"\r\n          this.toastr.successToastr('New appointment is added successfully');\r\n          \r\n      }, (err) => {        \r\n      //console.log(err);\r\n      });\r\n      \r\n    }if(this.mode == \"edit\"){\r\n      delete this.appointmentObject['patient']\r\n      delete this.appointmentObject['location']\r\n    //  this.appointmentObject['appointmentId'] = this.appointmentObject['_id']\r\n      //console.log(\"this.appointmentObject for edit == \"+JSON.stringify(this.appointmentObject))\r\n      this.dataService.updateAppointment(this.appointmentObject).then((result) => {\r\n        //  //console.log(\"****** updateappointment result   ===== **\"+JSON.stringify(result))\r\n          //this.loading = false;\r\n          this.mode = \"add\"   \r\n          this.fetchAppointments()\r\n          this.closeModal()\r\n          this.form_fill_failure_msg = \"\"\r\n          this.toastr.successToastr('appointment is updated successfully'); \r\n      }, (err) => {\r\n        this.mode = \"add\"\r\n        //this.loading = false;\r\n        //console.log(err);\r\n      });\r\n    }\r\n    \r\n}\r\nfetchPatientById(patientId){\r\n  let data = {patientId:patientId}\r\n  try {\r\n      \r\n      return new Promise((resolve) => {\r\n    \r\n            this.dataService.fetchPatientById(data).then((result) => {\r\n              \r\n            //console.log(\"****** patient  ===== **\"+JSON.stringify(result))\r\n                resolve(result['name'])                 \r\n        \r\n            }, (err) => {\r\n              resolve('')                 \r\n            //this.loading = false;\r\n            \r\n            //console.log(err);\r\n            });\r\n        });\r\n  }\r\n  catch(error) {\r\n      //console.log('Error', error);\r\n  }\r\n}\r\nfetchLocationById(locationId){\r\n  let data = {practiceLocationId:locationId}\r\n  try {      \r\n      return new Promise((resolve) => {    \r\n            this.dataService.fetchLocationById(data).then((result) => {\r\n              \r\n            //console.log(\"****** location  ===== **\"+JSON.stringify(result))\r\n                resolve(result['name'])                 \r\n        \r\n            }, (err) => {\r\n              resolve('')                 \r\n            //this.loading = false;\r\n            \r\n            //console.log(err);\r\n            });\r\n        });\r\n  }\r\n  catch(error) {\r\n      //console.log('Error', error);\r\n  }\r\n}\r\nfetchDoctrById(doctorId){\r\n  let data = {doctorId:doctorId}\r\n  try {      \r\n      return new Promise((resolve) => {    \r\n            this.dataService.fetchDoctrById(data).then((result) => {\r\n              \r\n            //console.log(\"****** location  ===== **\"+JSON.stringify(result))\r\n                resolve(result['name'])                 \r\n        \r\n            }, (err) => {\r\n              resolve('')                 \r\n            //this.loading = false;\r\n            \r\n            //console.log(err);\r\n            });\r\n        });\r\n  }\r\n  catch(error) {\r\n      //console.log('Error', error);\r\n  }\r\n}\r\nasync openForeditappointment(user){\r\n  this.mode = \"edit\"\r\n  this.disableSatusDropDown = false\r\n  this.paientName = ''\r\n  this.locationName = ''\r\n  this.doctorName = ''\r\n  this.appointmentObject = Object.assign({}, user); \r\n\r\n  \r\n  //let itemTemplateRefDiv = document.getElementById('itemTemplate');\r\n  //itemTemplateRefDiv.innerHTML = 'madan kanto';\r\n  this.paientName = await this.fetchPatientById(this.appointmentObject.patientId)  \r\n  this.locationName = await this.fetchLocationById(this.appointmentObject.locationId)\r\n\r\n  //console.log(\"this.appointmentObject **\"+JSON.stringify(this.appointmentObject))\r\n\r\n  this.doctorName = await this.fetchDoctrById(this.appointmentObject.doctorId)\r\n\r\n  //this.patientList.push({name:'madan kanto'})\r\n\r\n  this.appointmentObject.appointmentTime = this.backTONgTImeFOrmat(this.appointmentObject.appointmentTime)\r\n\r\n  //console.log(\"this.appointmentObject.appointmentTime **\"+JSON.stringify(this.appointmentObject.appointmentTime))\r\n\r\n  //this.appointmentObject.dateOfBirth = new Date(this.appointmentObject.dateOfBirth)\r\n\r\n  //this.appointmentObject.dateOfBirth =  moment(this.appointmentObject.dateOfBirth).format('DD-MMM-YYYY');\r\n\r\n  this.appointmentObject.appointmentDate = this.datePipe.transform(this.appointmentObject.appointmentDate, 'yyyy-MM-dd')\r\n\r\n  //this.openAddappointmentDialog()\r\n  this.modalReference = this.modal.open(this.appointmentFormModal);\r\n  \r\n  \r\n\r\n  //console.log(\"this.appointmentObject.appointmentDate **\"+this.appointmentObject.appointmentDate)\r\n  //this.userObject.userId = user._id\r\n  //this.role = user.role\r\n\r\n  \r\n  \r\n}\r\n  pageChanged(event){\r\n    //console.log(\"****** this.event   ===== **\"+event)\r\n    this.pageNo = event\r\n    this.applyFilter()\r\n  }\r\n  userKindChange(){\r\n    this.pageNo = 1\r\n    \r\n    this.applyFilter()\r\n  }\r\n  applyFilter() {\r\n      \r\n      this.fetchAppointments()\r\n    \r\n    \r\n  }\r\n  onChangePage(pageOfItems: Array<any>) {\r\n    // update current page of items\r\n    this.pageOfItems = pageOfItems;\r\n    this.pageNo = 1\r\n\r\n}\r\n  fetchPatients(){\r\n    let data = {pageNo:this.pageNo,perPage:this.pageSize}\r\n    this.dataService.fetchPatients(data).then((result:[]) => {\r\n        \r\n      this.normalFiltereduserListArr = [];      \r\n      this.normalFiltereduserListArr = result.map(element => element)\r\n     // //console.log(\"****** this.normalFiltereduserListArr   ===== **\"+JSON.stringify(this.normalFiltereduserListArr))\r\n\r\n      this.loading = false;\r\n\r\n    }, (err) => {\r\n      this.loading = false;\r\n      //console.log(err);\r\n    });\r\n  }\r\n  \r\n\r\n\r\n  fetchAppointmentsCount(){\r\n  //  this.pageNo = 1\r\n  //  this.pageSize = 10\r\n    this.dataService.fetchAppointmentsCount().then((result) => {\r\n        \r\n        //console.log(\"****** fetchappointmentsCount result   ===== **\"+JSON.stringify(result))\r\n      this.totalDocRecords = result;\r\n      //console.log(\"****** this.totalDocRecords ===== **\"+this.totalDocRecords)\r\n\r\n      this.loading = false;\r\n\r\n    }, (err) => {\r\n      this.loading = false;\r\n      //console.log(err);\r\n    });\r\n  }\r\n \r\n\r\n  fetchAppointments(){\r\n  //  this.pageNo = 1\r\n    //this.pageSize = 10\r\n    let data = {pageNo:this.pageNo,perPage:this.pageSize}\r\n    this.dataService.fetchAppointments(data).then((result:[]) => {\r\n        \r\n      this.normalFiltereduserListArr = [];  \r\n        this.normalFiltereduserListArr = result.map(element => element)\r\n        ////console.log(\"****** this.fetchAppointments   ===== **\"+JSON.stringify(this.normalFiltereduserListArr))\r\n        this.normalFiltereduserListArr.forEach(function(appointment, index){\r\n          //console.log(\"****** active   ===== **\"+ appointment.active)\r\n        })\r\n        \r\n        this.loading = false;\r\n\r\n    }, (err) => {\r\n      this.loading = false;\r\n      //console.log(err);\r\n    });\r\n\r\n  }\r\n  \r\n  updateStatus(value, userInfo) {\r\n   // userInfo.active = value\r\n  //  //console.log(\"****** userInfo   ===== **\"+JSON.stringify(userInfo))\r\n  let data ={}\r\n  userInfo.active = !userInfo.active\r\n  //console.log(\"******  userInfo.active   ===== **\"+userInfo.active )\r\n    \r\n      userInfo.appointmentId = userInfo._id\r\n      data['appointmentId'] = userInfo._id\r\n      data['active'] = userInfo.active\r\n      //console.log(\"****** userInfo   ===== **\"+JSON.stringify(data))\r\n\r\n          this.dataService.updateAppointment(data).then((result) => {\r\n          //  //console.log(\"****** updateappointment result   ===== **\"+JSON.stringify(result))\r\n          this.fetchAppointments()\r\n            this.loading = false;\r\n      \r\n        }, (err) => {\r\n          this.loading = false;\r\n          //console.log(err);\r\n        });\r\n    \r\n    this.toastr.successToastr('Appointment record updated successfully');\r\n  }\r\n\r\n  \r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\r\n\r\n\r\n\r\nimport { PageHeaderModule } from './../../shared';\r\n//import { LoadingModule } from 'ngx-loading';\r\n//import {NgxToggleModule} from \"ngx-toggle\";\r\nimport { UiSwitchModule } from 'ngx-toggle-switch';\r\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\r\nimport {AutocompleteLibModule} from 'angular-ng-autocomplete';\r\nimport { FlatpickrModule } from 'angularx-flatpickr';\r\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\r\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\r\nimport {NgxPaginationModule} from 'ngx-pagination';\r\nimport { AppointmentRoutingModule } from './appointment-routing.module';\r\nimport { AppointmentComponent } from './appointment.component';\r\nimport { NgxLoadingModule, ngxLoadingAnimationTypes } from 'ngx-loading';\r\n//import {DataTableModule, SharedModule, InputTextModule} from 'primeng/primeng';\r\n//import {PaginatorModule} from 'primeng/paginator';\r\n//import {DropdownModule} from 'primeng/dropdown';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    AutocompleteLibModule,\r\n    NgxPaginationModule,\r\n    AppointmentRoutingModule,\r\n    FormsModule,\r\n    PageHeaderModule,\r\n    NgxLoadingModule.forRoot({\r\n      animationType: ngxLoadingAnimationTypes.wanderingCubes,\r\n      backdropBackgroundColour: 'rgba(0,0,0,0.1)', \r\n      backdropBorderRadius: '4px',\r\n      primaryColour: '#ffffff', \r\n      secondaryColour: '#ffffff', \r\n      tertiaryColour: '#ffffff'\r\n  }),\r\n    UiSwitchModule,\r\n    NgbModule.forRoot(),\r\n  //  DropdownModule,\r\n  //PaginatorModule,\r\n    FlatpickrModule.forRoot(),\r\n    CalendarModule.forRoot({\r\n      provide: DateAdapter,\r\n      useFactory: adapterFactory\r\n    }),\r\n  ],\r\n  declarations: [AppointmentComponent]\r\n})\r\nexport class AppointmentModule { }\r\n"]}